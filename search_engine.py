import requests
from bs4 import BeautifulSoup
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
import os
import torch
from sentence_transformers import SentenceTransformer, util


# Категории для заполнения файла
LABELS_CARDS= {
    0: "о возбуждении исполнительного производства",
    1: "об отказе в возбуждении исполнительного производства",
    2: "о внесении изменений в ранее вынесенное постановление",
    3: "об отмене постановления частного судебного исполнителя",
    4: "об участии переводчика в исполнительном производстве",
    5: "об участии специалиста в исполнительном производстве",
    6: "о привлечении сотрудников или подразделений органов внутренних дел для обеспечения исполнения исполнительных документов",
    7: "о приостановлении исполнительного производства",
    8: "о возобновлении исполнительного производства",
    9: "о прекращении исполнительного производства",
    10: "о возвращении исполнительного документа",
    11: "о принятии исполнительного документа к своему производству",
    12: "о передаче имущества должника",
    13: "о передаче арестованного имущества на реализацию",
    14: "об обращении взыскания на дебиторскую задолженность",
    15: "об обращении взыскания на заработную плату и иные виды доходов",
    16: "об определении задолженности",
    17: "о распределении взысканных денежных сумм",
    18: "о присоединении к взысканию",
    19: "о направлении исполнительного документа в ликвидационную комиссию, банкротному управляющему, реабилитационному управляющему",
    20: "об отмене мер обеспечения исполнения исполнительного документа",
    21: "о возмещении расходов, понесенных при совершении исполнительных действий",
    22: "об утверждении сумм оплаты деятельности частного судебного исполнителя",
    23: "о запрещении совершать определенные действия",
    24: "о задержании транспортного средства и водворении на специальную стоянку",
    25: "об изъятии движимого имущества",
    26: "об истребовании информации о номерах банковских счетов и наличии денег на них, сведений о характере и стоимости имущества, находящегося в банках, организациях, осуществляющих отдельные виды банковских операций, а также в страховых организациях, и наложении ареста на них",
    27: "наложении ареста на имущество должника",
    28: "об обращении взыскания на имущество",
    29: "о временном ограничении на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    30: "о приостановлении временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    31: "о снятии временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    32: "о приводе лица, уклоняющегося от явки к судебному исполнителю",
    33: "об изъятии недвижимого имущества",
    34: "об изъятии правоустанавливающих документов",
    35: "об обращении взыскания на стипендию, пособие по социальному страхованию, при временной нетрудоспособности, пособие по безработице",
    36: "об истребовании информации о характере и содержании денежных требований, и наложении ареста на них",
    37: "об отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    38: "об отказе в отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    39: "о назначении оценщика по оценке арестованного имущества либо поручение о проведении оценки имущества должника одной из сторон исполнительного производства",
    40: "об объявлении должника в розыск"
}
# Категории (те же, что использовались при обучении)
labels_map = {
    0: "возбуждении исполнительного производства",
    1: "отказе в возбуждении исполнительного производства",
    2: "внесении изменений в ранее вынесенное постановление",
    3: "отмене постановления частного судебного исполнителя",
    4: "участии переводчика в исполнительном производстве",
    5: "участии специалиста в исполнительном производстве",
    6: "привлечении сотрудников или подразделений органов внутренних дел для обеспечения исполнения исполнительных документов",
    7: "приостановлении исполнительного производства",
    8: "возобновлении исполнительного производства",
    9: "прекращении исполнительного производства",
    10: "возвращении исполнительного документа",
    11: "принятии исполнительного документа к своему производству",
    12: "передаче имущества должника",
    13: "передаче арестованного имущества на реализацию",
    14: "обращении взыскания на дебиторскую задолженность",
    15: "обращении взыскания на заработную плату и иные виды доходов",
    16: "определении задолженности",
    17: "распределении взысканных денежных сумм",
    18: "присоединении к взысканию",
    19: "направлении исполнительного документа в ликвидационную комиссию, банкротному управляющему, реабилитационному управляющему",
    20: "отмене мер обеспечения исполнения исполнительного документа",
    21: "возмещении расходов, понесенных при совершении исполнительных действий",
    22: "утверждении сумм оплаты деятельности частного судебного исполнителя",
    23: "запрещении совершать определенные действия",
    24: "задержании транспортного средства и водворении на специальную стоянку",
    25: "изъятии движимого имущества",
    26: "истребовании информации о номерах банковских счетов и наличии денег на них, сведений о характере и стоимости имущества, находящегося в банках, организациях, осуществляющих отдельные виды банковских операций, а также в страховых организациях, и наложении ареста на них",
    27: "наложении ареста на имущество должника",
    28: "обращении взыскания на имущество",
    29: "временном ограничении на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    30: "приостановлении временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    31: "снятии временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    32: "приводе лица, уклоняющегося от явки к судебному исполнителю",
    33: "изъятии недвижимого имущества",
    34: "изъятии правоустанавливающих документов",
    35: "обращении взыскания на стипендию, пособие по социальному страхованию, при временной нетрудоспособности, пособие по безработице",
    36: "истребовании информации о характере и содержании денежных требований, и наложении ареста на них",
    37: "отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    38: "отказе в отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    39: "назначении оценщика по оценке арестованного имущества либо поручение о проведении оценки имущества должника одной из сторон исполнительного производства",
    40: "объявлении должника в розыск"
}

# Загрузка дообученной модели для определения типа шаблона
device = "cuda" if torch.cuda.is_available() else "cpu"
model_template = SentenceTransformer("fine_tuned_sbert").to(device)

# Преобразование категории в эмбеддинги
label_texts = list(labels_map.values())
label_embeddings = model_template.encode(label_texts, convert_to_tensor=True)

# Загрузка модели для поиска по законодательству
model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
FILE_PATH = "law_text.txt"
law_fragments = []
index = None


import os
import pickle
import requests
from bs4 import BeautifulSoup
import numpy as np
import faiss

FILE_PATH = "law_fragments.txt"
EMBEDDINGS_PATH = "embeddings.npy"
INDEX_PATH = "faiss.index"

def init():
    global law_fragments, index

    if os.path.exists(FILE_PATH) and os.path.exists(EMBEDDINGS_PATH) and os.path.exists(INDEX_PATH):
        print("Загрузка данных из кэша...")
        with open(FILE_PATH, "r", encoding="utf-8") as file:
            law_fragments = file.read().splitlines()
        embeddings = np.load(EMBEDDINGS_PATH)
        index = faiss.read_index(INDEX_PATH)
        print(f"Загружено {len(law_fragments)} фрагментов из кэша")
        return

    URL = "https://adilet.zan.kz/rus/docs/Z100000261_"
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, "lxml")

    container = soup.find("div", class_="gs_12")
    if container:
        for tag in container.find_all(["span", "a"]):
            tag.decompose()
    paragraphs = container.find_all("p") if container else []

    law_fragments = []
    current_article_title = None
    current_article_lines = []

    for p in paragraphs:
        bold = p.find("b")
        if bold and bold.get_text().strip().startswith("Статья"):
            if current_article_title and current_article_lines:
                full_text = "\n".join(current_article_lines)
                law_fragments.extend(split_article(full_text, current_article_title))
            current_article_title = bold.get_text().strip()
            current_article_lines = []
        else:
            text = p.get_text().strip()
            if text:
                current_article_lines.append(text)

    if current_article_title and current_article_lines:
        full_text = "\n".join(current_article_lines)
        law_fragments.extend(split_article(full_text, current_article_title))

    with open(FILE_PATH, "w", encoding="utf-8") as file:
        file.write("\n".join(law_fragments))

    print(f"Загружено {len(law_fragments)} фрагментов и сохранено в файл")

    # Создание эмбеддингов
    embeddings = model.encode(law_fragments, convert_to_numpy=True, batch_size=32)
    embeddings = embeddings / np.linalg.norm(embeddings, axis=1, keepdims=True)
    
    np.save(EMBEDDINGS_PATH, embeddings)

    index = faiss.IndexFlatIP(embeddings.shape[1])
    index.add(embeddings)
    faiss.write_index(index, INDEX_PATH)

    print("Эмбеддинги сохранены")


def split_article(article_text, article_title):
    """Разбивает текст статьи на пункты и подпункты.
       Форматирует фрагменты в виде: 'Статья X п. Y пп. Z. Текст пункта'"""
    fragments = []
    lines = article_text.split("\n")
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
        
        # Если строка начинается с цифры и содержит закрывающую скобку,
        # считаем её пунктом или подпунктом
        if line[0].isdigit() and ")" in line:
            point_number = line.split(")")[0]  # Извлекаем номер пункта
            text = line[len(point_number)+1:].strip()
            fragments.append(f"{article_title} п. {point_number}. {text}")
        else:
            # Остальной текст относим к заголовку или описанию статьи
            fragments.append(f"{article_title}. {line}")
    
    return fragments


def search(query, top_k=1):
    if not law_fragments or index is None:
        print("Ошибка: Данные не загружены. Запустите init().")
        return []
    query_vector = model.encode([query], convert_to_numpy=True)
    distances, indices = index.search(query_vector, top_k)
    return [law_fragments[idx] for idx in indices[0]]


def classify_query(query: str):
    # Преобразуем запрос в эмбеддинг
    query_embedding = model_template.encode(query, convert_to_tensor=True)

    # Вычисляем косинусное сходство между запросом и всеми категориями
    similarities = util.pytorch_cos_sim(query_embedding, label_embeddings)

    # Находим индекс самой похожей категории
    best_match_idx = torch.argmax(similarities).item()

    # Индекс найденной категории
    return best_match_idx



    