import torch
from sentence_transformers import SentenceTransformer, util
import pandas as pd
import random as rd
# Загружаем дообученную модель
device = "cuda" if torch.cuda.is_available() else "cpu"
model = SentenceTransformer("fine_tuned_sbert").to(device)

# Категории (те же, что использовались при обучении)
labels_cards = {
    0: "о возбуждении исполнительного производства",
    1: "об отказе в возбуждении исполнительного производства",
    2: "о внесении изменений в ранее вынесенное постановление",
    3: "об отмене постановления частного судебного исполнителя",
    4: "об участии переводчика в исполнительном производстве",
    5: "об участии специалиста в исполнительном производстве",
    6: "о привлечении сотрудников или подразделений органов внутренних дел для обеспечения исполнения исполнительных документов",
    7: "о приостановлении исполнительного производства",
    8: "о возобновлении исполнительного производства",
    9: "о прекращении исполнительного производства",
    10: "о возвращении исполнительного документа",
    11: "о принятии исполнительного документа к своему производству",
    12: "о передаче имущества должника",
    13: "о передаче арестованного имущества на реализацию",
    14: "об обращении взыскания на дебиторскую задолженность",
    15: "об обращении взыскания на заработную плату и иные виды доходов",
    16: "об определении задолженности",
    17: "о распределении взысканных денежных сумм",
    18: "о присоединении к взысканию",
    19: "о направлении исполнительного документа в ликвидационную комиссию, банкротному управляющему, реабилитационному управляющему",
    20: "об отмене мер обеспечения исполнения исполнительного документа",
    21: "о возмещении расходов, понесенных при совершении исполнительных действий",
    22: "об утверждении сумм оплаты деятельности частного судебного исполнителя",
    23: "о запрещении совершать определенные действия",
    24: "о задержании транспортного средства и водворении на специальную стоянку",
    25: "об изъятии движимого имущества",
    26: "об истребовании информации о номерах банковских счетов и наличии денег на них, сведений о характере и стоимости имущества, находящегося в банках, организациях, осуществляющих отдельные виды банковских операций, а также в страховых организациях, и наложении ареста на них",
    27: "наложении ареста на имущество должника",
    28: "об обращении взыскания на имущество",
    29: "о временном ограничении на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    30: "о приостановлении временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    31: "о снятии временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    32: "о приводе лица, уклоняющегося от явки к судебному исполнителю",
    33: "об изъятии недвижимого имущества",
    34: "об изъятии правоустанавливающих документов",
    35: "об обращении взыскания на стипендию, пособие по социальному страхованию, при временной нетрудоспособности, пособие по безработице",
    36: "об истребовании информации о характере и содержании денежных требований, и наложении ареста на них",
    37: "об отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    38: "об отказе в отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    39: "о назначении оценщика по оценке арестованного имущества либо поручение о проведении оценки имущества должника одной из сторон исполнительного производства",
    40: "об объявлении должника в розыск"
}
labels_map = {
    0: "о возбуждении исполнительного производства",
    1: "об отказе в возбуждении исполнительного производства",
    2: "о внесении изменений в ранее вынесенное постановление",
    3: "об отмене постановления частного судебного исполнителя",
    4: "об участии переводчика в исполнительном производстве",
    5: "об участии специалиста в исполнительном производстве",
    6: "о привлечении сотрудников или подразделений органов внутренних дел для обеспечения исполнения исполнительных документов",
    7: "о приостановлении исполнительного производства",
    8: "о возобновлении исполнительного производства",
    9: "о прекращении исполнительного производства",
    10: "о возвращении исполнительного документа",
    11: "о принятии исполнительного документа к своему производству",
    12: "о передаче имущества должника",
    13: "о передаче арестованного имущества на реализацию",
    14: "об обращении взыскания на дебиторскую задолженность",
    15: "об обращении взыскания на заработную плату и иные виды доходов",
    16: "об определении задолженности",
    17: "о распределении взысканных денежных сумм",
    18: "о присоединении к взысканию",
    19: "о направлении исполнительного документа в ликвидационную комиссию, банкротному управляющему, реабилитационному управляющему",
    20: "об отмене мер обеспечения исполнения исполнительного документа",
    21: "о возмещении расходов, понесенных при совершении исполнительных действий",
    22: "об утверждении сумм оплаты деятельности частного судебного исполнителя",
    23: "о запрещении совершать определенные действия",
    24: "о задержании транспортного средства и водворении на специальную стоянку",
    25: "об изъятии движимого имущества",
    26: "об истребовании информации о номерах банковских счетов и наличии денег на них, сведений о характере и стоимости имущества, находящегося в банках, организациях, осуществляющих отдельные виды банковских операций, а также в страховых организациях, и наложении ареста на них",
    27: "о наложении ареста на имущество должника",
    28: "об обращении взыскания на имущество",
    29: "о временном ограничении на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    30: "о приостановлении временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    31: "о снятии временного ограничения на выезд физического лица, руководителя (исполняющего обязанности) юридического лица, являющегося должником, из Республики Казахстан",
    32: "о приводе лица, уклоняющегося от явки к судебному исполнителю",
    33: "об изъятии недвижимого имущества",
    34: "об изъятии правоустанавливающих документов",
    35: "об обращении взыскания на стипендию, пособие по социальному страхованию, при временной нетрудоспособности, пособие по безработице",
    36: "об истребовании информации о характере и содержании денежных требований, и наложении ареста на них",
    37: "об отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    38: "об отказе в отводе (самоотводе) специалиста, переводчика, судебного исполнителя, помощника частного судебного исполнителя",
    39: "о назначении оценщика по оценке арестованного имущества либо поручение о проведении оценки имущества должника одной из сторон исполнительного производства",
    40: "об объявлении должника в розыск"
}
# Преобразуем категории в эмбеддинги
label_texts = list(labels_map.values())
label_embeddings = model.encode(label_texts, convert_to_tensor=True)


def classify_query(query: str):
    # Преобразуем запрос в эмбеддинг
    query_embedding = model.encode(query, convert_to_tensor=True)

    # Вычисляем косинусное сходство между запросом и всеми категориями
    similarities = util.pytorch_cos_sim(query_embedding, label_embeddings)

    # Находим индекс самой похожей категории
    best_match_idx = torch.argmax(similarities).item()

    # Возвращаем индекс найденной категории
    return best_match_idx


query = "Какие сроки установлены для возбуждения ИП?"
category = classify_query(query)
df = pd.read_csv("dataset_updated.csv")
val_data = list(df.itertuples(index=False, name=None))
 
queries = [pair[0] for pair in val_data]
templates = [pair[1] for pair in val_data]
length = len(queries)


def check():
    count_test = 10000
    succeses = 0
    variables = set()
    indices = rd.choices(range(length), k=count_test)
    for i in indices:
        option = labels_map[classify_query(queries[i])]
        if option == templates[i]:
            succeses += 1
        else:
            variables.add(option)
    print(variables)

    return succeses / count_test

if __name__ == "__main__":
    print(f"Точность: {check()}") # ~99.56%
